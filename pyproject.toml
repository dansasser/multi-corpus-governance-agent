[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcg-agent"
version = "0.1.0"
description = "A governed AI assistant that connects to multiple corpora and routes them through a five-agent pipeline"
readme = "README.md"
license = {text = "AGPL-3.0"}
authors = [
    {name = "Multi-Corpus Governance Agent Team", email = "team@mcg-agent.com"}
]
maintainers = [
    {name = "Multi-Corpus Governance Agent Team", email = "team@mcg-agent.com"}
]
keywords = [
    "ai", "governance", "multi-agent", "corpus", "nlp", "pydantic-ai", 
    "chatbot", "assistant", "pipeline", "mvlm"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    # Core language model orchestration
    "pydantic-ai==0.0.10",
    
    # Web framework & API server
    "fastapi==0.115.0",
    "uvicorn[standard]==0.31.0",
    
    # Database connectors
    "sqlalchemy==2.0.35",
    "alembic==1.13.2",
    "psycopg2-binary==2.9.9",
    "aiosqlite==0.20.0",
    
    # Redis client
    "redis==5.0.8",
    
    # Security & authentication
    "python-dotenv==1.0.1",
    "passlib[bcrypt]==1.7.4",
    "pyjwt[crypto]==2.9.0",
    
    # CLI dependencies
    "click>=8.0.0",
    "rich>=13.0.0",
    
    # Configuration management
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Observability
    "structlog==24.4.0",
    "loguru==0.7.2",
    
    # HTTP client for health checks
    "httpx==0.27.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.3",
    "pytest-asyncio>=0.23.8",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.0.0",
    "pytest-watch>=4.2.0",
    
    # Code quality
    "black>=24.0.0",
    "isort>=5.12.0",
    "flake8>=7.0.0",
    "mypy>=1.11.2",
    "ruff>=0.6.9",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    
    # Development tools
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]

production = [
    # Production server
    "gunicorn>=21.0.0",
    
    # Monitoring
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.40.0",
    
    # Performance
    "orjson>=3.9.0",
    "ujson>=5.8.0",
]

all = [
    "mcg-agent[dev,production]"
]

[project.urls]
Homepage = "https://github.com/dansasser/multi-corpus-governance-agent"
Documentation = "https://github.com/dansasser/multi-corpus-governance-agent/docs"
Repository = "https://github.com/dansasser/multi-corpus-governance-agent"
Issues = "https://github.com/dansasser/multi-corpus-governance-agent/issues"
Changelog = "https://github.com/dansasser/multi-corpus-governance-agent/blob/main/CHANGELOG.md"

[project.scripts]
mcg-agent = "mcg_agent.cli.main:main"

[project.entry-points."mcg_agent.plugins"]
# Plugin entry points for extensibility
personal_search = "mcg_agent.search.connectors:query_personal"
social_search = "mcg_agent.search.connectors:query_social"
published_search = "mcg_agent.search.connectors:query_published"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["mcg_agent*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
mcg_agent = [
    "py.typed",
    "*.json",
    "*.yaml",
    "*.yml",
    "templates/*.html",
    "static/*",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "redis.*",
    "psycopg2.*",
    "pydantic_ai.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "smoke: marks tests as smoke tests",
]
asyncio_mode = "auto"
timeout = 300
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/mcg_agent"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# Flake8 configuration (for compatibility)
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "alembic/versions",
]

# Tox configuration
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py311, py312, lint, type-check
isolated_build = true

[testenv]
deps = 
    pytest
    pytest-asyncio
    pytest-cov
commands = pytest {posargs}

[testenv:lint]
deps = 
    black
    isort
    flake8
    ruff
commands = 
    black --check src tests
    isort --check-only src tests
    flake8 src tests
    ruff check src tests

[testenv:type-check]
deps = 
    mypy
    types-redis
commands = mypy src

[testenv:docs]
deps = 
    sphinx
    sphinx-rtd-theme
    myst-parser
commands = sphinx-build -W -b html docs docs/_build/html
"""
