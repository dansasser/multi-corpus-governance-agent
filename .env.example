# Multi-Corpus Governance Agent - Environment Configuration
# Copy this file to .env and update with your actual values

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# PostgreSQL Database (Production)
POSTGRES_USER=mcg_agent
POSTGRES_PASSWORD=your-secure-database-password-here
POSTGRES_DB=mcg_agent
POSTGRES_HOST=localhost
POSTGRES_PORT=5432

# Alternative: SQLite Database (Development)
# DATABASE_URL=sqlite:///./mcg_agent.db

# Database URL (automatically constructed from above, or set directly)
# DATABASE_URL=postgresql+psycopg2://mcg_agent:password@localhost:5432/mcg_agent

# Test Database (for running tests)
TEST_DATABASE_URL=sqlite:///./test_mcg_agent.db

# ==============================================================================
# REDIS CONFIGURATION (Session Management & Caching)
# ==============================================================================

REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your-secure-redis-password-here
REDIS_TLS=false

# Redis URL (automatically constructed from above, or set directly)
# REDIS_URL=redis://:password@localhost:6379/0

# ==============================================================================
# SECURITY CONFIGURATION
# ==============================================================================

# JWT Secret Key (MUST be changed in production!)
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=your-jwt-secret-key-change-this-in-production

# JWT Algorithm and Token Expiration
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Encryption Key for sensitive data (MUST be 32 bytes!)
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
ENCRYPTION_KEY=your-32-byte-encryption-key-change-this-in-production

# ==============================================================================
# API KEYS (Required for Agent Operations)
# ==============================================================================

# OpenAI API Key (for GPT models)
OPENAI_API_KEY=your-openai-api-key-here
# OpenAI Model (for dev provider)
OPENAI_MODEL=gpt-4o-mini

# Anthropic API Key (for Claude models)
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# Optional: Other AI Service API Keys
# COHERE_API_KEY=your-cohere-api-key-here
# HUGGINGFACE_API_KEY=your-huggingface-api-key-here

# ==============================================================================
# SERVER CONFIGURATION
# ==============================================================================

# Server Host and Port
HOST=0.0.0.0
PORT=8000

# Environment Mode
ENVIRONMENT=development
DEBUG=true

# Logging Configuration
LOG_LEVEL=INFO
LOG_FORMAT=json

# Generation Provider (dev vs MVLM)
# Options: punctuation_only | openai | mvlm
GEN_PROVIDER=punctuation_only

# Worker Configuration (for production)
WORKERS=4
WORKER_CLASS=uvicorn.workers.UvicornWorker

# ==============================================================================
# GOVERNANCE CONFIGURATION
# ==============================================================================

# API Call Limits (per agent per task)
IDEATOR_MAX_API_CALLS=2
DRAFTER_MAX_API_CALLS=1
CRITIC_MAX_API_CALLS=2
REVISOR_MAX_API_CALLS=1
SUMMARIZER_MAX_API_CALLS=0

# MVLM Configuration
MVLM_ENABLED=true
MVLM_FALLBACK_ENABLED=true
MVLM_MODEL_PATH=/path/to/local/mvlm/model

# Scoring Thresholds
COVERAGE_SCORE_MIN=0.7
TONE_SCORE_MIN=0.6
DIVERSITY_CHECK_ENABLED=true

# ==============================================================================
# CORPUS CONFIGURATION
# ==============================================================================

# Personal Corpus Settings
PERSONAL_CORPUS_ENABLED=true
PERSONAL_MAX_RESULTS=20
PERSONAL_SNIPPET_LENGTH=240

# Social Corpus Settings
SOCIAL_CORPUS_ENABLED=true
SOCIAL_MAX_RESULTS=30
SOCIAL_SNIPPET_LENGTH=150

# Published Corpus Settings
PUBLISHED_CORPUS_ENABLED=true
PUBLISHED_MAX_RESULTS=20
PUBLISHED_SNIPPET_LENGTH=200

# RAG (Retrieval-Augmented Generation) Settings
RAG_ENABLED=true
RAG_MAX_RESULTS=10
RAG_SIMILARITY_THRESHOLD=0.8

# ==============================================================================
# CACHING CONFIGURATION
# ==============================================================================

# Cache Settings
CACHE_ENABLED=true
CACHE_TTL=3600
CACHE_MAX_SIZE=1000
# Backend: none | memory | redis
MCG_CACHE_BACKEND=none
# If memory backend, optional compression (requires zlib available)
MCG_CACHE_COMPRESS=false
# Max items for in-memory cache
MCG_CACHE_MAX_ITEMS=1024

# Search Result Caching
SEARCH_CACHE_ENABLED=true
SEARCH_CACHE_TTL=1800

# ==============================================================================
# MONITORING & OBSERVABILITY
# ==============================================================================

# Sentry (Error Tracking)
# SENTRY_DSN=your-sentry-dsn-here
# SENTRY_ENVIRONMENT=development

# Prometheus Metrics
METRICS_ENABLED=false
METRICS_PORT=9090

# Health Check Configuration
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_TIMEOUT=10

# ==============================================================================
# CLI CONFIGURATION
# ==============================================================================

# CLI Default Settings
MCG_CLI_VERBOSE=false
MCG_CLI_COLOR=true
MCG_CLI_DEFAULT_HOST=localhost
MCG_CLI_DEFAULT_PORT=8000
MCG_CLI_DEFAULT_FORMAT=text
MCG_CLI_QUERY_TIMEOUT=30

# ==============================================================================
# DEVELOPMENT SETTINGS
# ==============================================================================

# Development Mode Settings (only used when ENVIRONMENT=development)
DEV_AUTO_RELOAD=true
DEV_SHOW_SQL=false
DEV_MOCK_EXTERNAL_APIS=false

# Testing Settings
TEST_SKIP_SLOW_TESTS=false
TEST_PARALLEL_WORKERS=auto

# Optimizer (Response Optimizer)
FEATURE_RESPONSE_OPTIMIZER=false
OPTIMIZATION_STRATEGY=balanced
OPTIMIZATION_TIMEBOX_MS=1500
OPTIMIZATION_ENABLE_CACHE=true
OPTIMIZATION_CACHE_TTL_MS=60000
OPTIMIZATION_QA_MIN_TONE=0.5
OPTIMIZATION_QA_MIN_STYLE=0.5
OPTIMIZATION_QA_MIN_OVERALL=0.6
OPTIMIZATION_QA_ENFORCE=false

# ==============================================================================
# PRODUCTION SETTINGS
# ==============================================================================

# Production Security Settings (only used when ENVIRONMENT=production)
PROD_FORCE_HTTPS=true
PROD_SECURE_COOKIES=true
PROD_CORS_ORIGINS=https://yourdomain.com,https://api.yourdomain.com

# SSL/TLS Configuration
SSL_KEYFILE=/path/to/ssl/private.key
SSL_CERTFILE=/path/to/ssl/certificate.crt

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_BURST=10

# ==============================================================================
# OPTIONAL INTEGRATIONS
# ==============================================================================

# Email Configuration (for notifications)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# SMTP_USE_TLS=true

# Webhook Configuration (for external integrations)
# WEBHOOK_SECRET=your-webhook-secret
# WEBHOOK_TIMEOUT=30

# ==============================================================================
# FEATURE FLAGS
# ==============================================================================

# Feature toggles for experimental features
FEATURE_VOICE_FINGERPRINTING=true
FEATURE_ADVANCED_RAG=false
FEATURE_MULTI_LANGUAGE=false
FEATURE_REAL_TIME_PROCESSING=false

# ==============================================================================
# NOTES
# ==============================================================================

# 1. SECURITY: Never commit this file with real credentials to version control
# 2. PRODUCTION: Generate secure random values for all secrets
# 3. BACKUP: Keep a secure backup of your production .env file
# 4. ROTATION: Regularly rotate API keys and secrets
# 5. VALIDATION: Use the CLI command 'mcg-agent status' to validate configuration

# Generate secure secrets with these commands:
# JWT_SECRET_KEY: python -c "import secrets; print(secrets.token_urlsafe(32))"
# ENCRYPTION_KEY: python -c "import secrets; print(secrets.token_urlsafe(32))"
# REDIS_PASSWORD: python -c "import secrets; print(secrets.token_urlsafe(16))"
